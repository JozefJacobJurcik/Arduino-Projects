#include "arduino_secrets.h"
/* 
  Sketch generated by the Arduino IoT Cloud Thing "Untitled"
  https://create.arduino.cc/cloud/things/6f040ed3-399f-402e-a56d-b46155b23073 

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  String message;
  bool led;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"
#include "Menu.h"
#include "Plant.h"
#include "time.h"
#include "TimeLib.h"
#include "sntp.h"
#include "tuple"


const int LED_PIN = 23;
const int M1_PIN = 34;
const int M2_PIN = 35;
const int SWITCH_PIN = 32;
const int R1_PIN = 25;
const int R2_PIN = 27;

//------------------------------------------ temp
int temp = 20;
//------------------------------------------

//objects
Plant p1 = Plant(1 , R1_PIN , M2_PIN);
Plant p2 = Plant(2 , R2_PIN , M2_PIN);

Menu menu = Menu(0);

time_t timeoutAfterWatering;
time_t timeOfLastMessageChange;


void setup() {
  
  // Initialize serial and wait for port to open:
  Serial.begin(9600);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500); 


  

  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  
  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information youâ€™ll get.
     The default is 0 (only errors).
     Maximum is 4
 */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();

  //time setup
  
  


  pinMode(25, OUTPUT);
  pinMode(27, OUTPUT);
  pinMode(LED_PIN, OUTPUT);
  
}

void loop() {
  ArduinoCloud.update();
  // Your code here 
  
  // todo only if connected

  //update time at 3 am
  if ((hour()==3)&& (0 < minute() < 4)){
    updateTime();
  }

  //chcek bedtime
  auto bedtime = menu.getBedtime(); 
  bool isItBedtime = (std::get<0>(bedtime)*60 + std::get<1>(bedtime)) < (hour()*60 + minute()) < (std::get<2>(bedtime)*60 + std::get<3>(bedtime));
  
  if (!(isItBedtime || (getCustomTimeNow() < timeoutAfterWatering))){
    
    if (checkEnoughWater()){
      checkAlarmWaterSetNextAllPlants();
    } else {
      //todo notification
    }
  } 

  if (( getCustomTimeNow() - timeOfLastMessageChange) < 600){
    delay(100);
  } else {
    delay(60000); // wait a minute between updates if not actively messaging
  }

  /*-----
  int valueOne = analogRead(35); // read the analog value from sensor
  int valueTwo = analogRead(34);
  int valueSwitch = digitalRead(32);

  Serial.println(valueOne);
  Serial.println(valueSwitch);
  Serial.println(valueTwo);

  if (valueSwitch == HIGH){
    digitalWrite(25, HIGH);
    digitalWrite(27, LOW);
  } else {
    digitalWrite(27, HIGH);
    digitalWrite(25, LOW);
  }
  */

  
  
  
  
}

void checkAlarmWaterSetNextAllPlants(){
  bool wasWatered = false;

  if (p1.getAlarmIsTripped()){
      p1.waterPlant();
      p1.setAlarm();
      wasWatered = true;
      if (p1.checkError()){
      // todo notify with p1.getErrorMessageAndReset()
      }
    }

    if (p2.getAlarmIsTripped()){
      p2.waterPlant();
      p2.setAlarm();
      wasWatered = true;
      if (p2.checkError()){
      // todo notify with p1.getErrorMessageAndReset()
      }
    }
  
  if (wasWatered){ // not ideal because the menu doesnt work
    timeoutAfterWatering = getCustomTimeNow() + 600 ; // 10 min from now
    wasWatered = false;
  }
}

/*
  Since Led is READ_WRITE variable, onLedChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onLedChange()  {
  // Add your code here to act upon Led change
  if(led){
    digitalWrite(LED_PIN, HIGH);
  } else {
    digitalWrite(LED_PIN, LOW);
  }
  
}

/*
  Since Message is READ_WRITE variable, onMessageChange() is
  executed every time a new value is received from IoT Cloud.
*/

void onMessageChange()  {

  timeOfLastMessageChange = getCustomTimeNow();

  if (menu.getReplyReadyStatus()){
    message = menu.getReply() ;
  } else {
    menu.check(message);
  }

} 


void switchLed(bool switchOn){
  if(switchOn){
    digitalWrite(LED_PIN, HIGH);
  } else {
    digitalWrite(LED_PIN, LOW);
  }
}

void updateTime(){
  time_t unixTime = ArduinoCloud.getLocalTime(); // Unix timestamp
  if (unixTime != 0){
    setTime(unixTime);
  } else {
    message = "Its either 1970 or something went wrong and time could not be updated";
  } 
}

bool checkEnoughWater(){
  return (digitalRead(SWITCH_PIN)== HIGH);
}

time_t getCustomTimeNow(){
  return ArduinoCloud.getLocalTime();
}

